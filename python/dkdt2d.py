import numpy as np
def dkdt2d(Ex,Ey,nuxy,T,V):
    c = np.cos(T)
    s = np.sin(T)
    delta = 1.0*Ex - 1.0*Ey*nuxy**2
    dkdt = np.zeros((8,8))
    dkdt[0][0] = 0.333333333333333*Ex**2*nuxy*s**2/delta - 0.333333333333333*Ex**2*nuxy*c**2/delta - 0.666666666666667*Ex**2*s*c/delta + 0.666666666666667*Ex*Ey*s*c/delta + 0.333333333333333*Ey**2*nuxy*s**2/delta - 0.333333333333333*Ey**2*nuxy*c**2/delta
    dkdt[0][1] = -0.5*Ex**2*nuxy*s*c/delta - 0.25*Ex**2*s**2/delta + 0.25*Ex**2*c**2/delta + 0.25*Ex*Ey*s**2/delta - 0.25*Ex*Ey*c**2/delta - 0.5*Ey**2*nuxy*s*c/delta
    dkdt[0][2] = -dkdt[0][0]
    dkdt[0][3] = dkdt[0][1]
    dkdt[0][4] = -0.166666666666667*Ex**2*nuxy*s**2/delta + 0.166666666666667*Ex**2*nuxy*c**2/delta + 0.333333333333333*Ex**2*s*c/delta - 0.333333333333333*Ex*Ey*s*c/delta - 0.166666666666667*Ey**2*nuxy*s**2/delta + 0.166666666666667*Ey**2*nuxy*c**2/delta
    dkdt[0][5] = -dkdt[0][1]
    dkdt[0][6] = -dkdt[0][4]
    dkdt[0][7] = -dkdt[0][1]
    dkdt[1][1] = -dkdt[0][0]
    dkdt[1][2] = -dkdt[0][1]
    dkdt[1][3] = dkdt[0][4]
    dkdt[1][4] = -dkdt[0][1]
    dkdt[1][5] = -dkdt[0][4]
    dkdt[1][6] = dkdt[0][1]
    dkdt[1][7] = dkdt[0][0]
    dkdt[2][2] = dkdt[0][0]
    dkdt[2][3] = -dkdt[0][1]
    dkdt[2][4] = -dkdt[0][4]
    dkdt[2][5] = dkdt[0][1]
    dkdt[2][6] = dkdt[0][4]
    dkdt[2][7] = dkdt[0][1]
    dkdt[3][3] = -dkdt[0][0]
    dkdt[3][4] = -dkdt[0][1]
    dkdt[3][5] = dkdt[0][0]
    dkdt[3][6] = dkdt[0][1]
    dkdt[3][7] = -dkdt[0][4]
    dkdt[4][4] = dkdt[0][0]
    dkdt[4][5] = dkdt[0][1]
    dkdt[4][6] = -dkdt[0][0]
    dkdt[4][7] = dkdt[0][1]
    dkdt[5][5] = -dkdt[0][0]
    dkdt[5][6] = -dkdt[0][1]
    dkdt[5][7] = dkdt[0][4]
    dkdt[6][6] = dkdt[0][0]
    dkdt[6][7] = -dkdt[0][1]
    dkdt[7][7] = -dkdt[0][0]
    dkdt = dkdt + dkdt.T - np.diag(dkdt.diagonal())
    dkdt *= V
    return dkdt